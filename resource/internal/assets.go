package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _assets_minecraft_texts_splashes_txt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x55\x7f\x6e\x1c\x45\x13\xfd\xbf\x4f\x51\x93\x4f\xfa\xbc\x8b\xec\x59\x12\xdb\x28\xd9\x28\x42\x89\x13\xc2\x0a\x6f\x82\x70\x22\x40\x88\x44\xbd\x3d\x35\x3b\x9d\x9d\xe9\x1e\xfa\xc7\x8e\x57\x21\x77\xe1\x0c\x9c\x88\xa3\xf0\xaa\x17\x88\x25\x5b\x9a\x6e\x57\x57\xbd\x7a\xf5\x5e\x79\x45\x9b\x5e\x0f\x4c\x3f\xf9\xa0\x56\x29\x92\xf3\x89\x34\x6d\xf2\x96\x2c\x4e\x9a\x5a\xd6\x29\x07\xae\xd4\x73\xef\x4e\x12\x6d\x3d\x25\x4f\xff\x4b\x9d\x75\xbb\x53\x4a\x56\x42\xa2\xed\xfb\x03\x8d\xbd\x36\xac\xde\x70\x4c\xdc\x54\x34\x5b\x39\x1a\x83\x6f\xb2\x49\xd6\xbb\xb9\x7a\x85\xb4\xd6\x51\x34\xba\xd7\x55\x29\x84\xb8\x3d\xbb\x52\x6f\xec\xca\x77\x85\xa8\x89\x26\xde\x48\x14\x2a\xae\xd9\x4f\x0a\xf8\x38\x91\x77\x4c\xbe\x25\x63\x5d\x73\x38\x89\x64\x34\x12\x6c\x82\xdf\x31\x50\x56\xea\xc9\xbb\xfa\xdd\x13\xf5\xd7\x9f\x7f\xbc\xc7\xaf\xba\xf2\xc3\x60\x13\x05\xa4\x0c\xc0\x22\x65\x2f\xeb\xfa\xa2\xae\xcf\xeb\xba\x56\xd7\x3a\x01\x22\x01\xf8\x36\x70\xf9\xae\xd4\x2f\x6f\x3a\x9c\xe3\x88\x06\xe4\x0f\xd6\x25\x76\x02\x5b\x4b\x5f\x3d\xb7\x49\x38\x72\xbb\x5f\xd5\x1b\x69\xfb\x99\x4f\x4b\x42\xaa\x9a\xbe\x28\x67\xdf\x36\x48\xd4\x51\xa3\x07\x07\x38\xc7\x26\x2c\x2e\x06\x1f\x58\x98\x8c\x95\xfa\x97\xe5\xb5\xff\xa0\xdd\x16\x79\x98\x7a\x0f\x2e\x51\x2d\xf9\x54\xea\x14\xe2\xa3\xb1\x96\x74\x10\xf4\xae\xe1\x00\xf4\x1a\x11\x7c\x2b\x23\x88\xea\xda\x7b\x90\x8e\xde\x26\x1f\x76\x11\xa4\xd0\x70\xa0\x41\x1b\xa0\xe0\x5a\xbd\x1e\x41\xe7\x8d\xcf\xc1\x70\x45\x5d\x4a\x63\x5c\x2e\x16\x5b\x00\xc9\x9b\xda\xf8\x61\x91\xee\x80\x5d\x1c\xd9\x57\xcf\xb2\xed\xd3\x11\xed\x4b\x5f\xa9\x14\x0e\xf4\x91\x3e\x09\xbf\xa6\xa3\xd9\x8b\x5b\xc3\xa3\x10\x41\x3c\x97\x7b\x35\x6a\x67\xcd\x2c\xb0\xf1\xe0\x76\x36\x9f\xab\xc5\x82\x9e\x6e\xb4\x6b\x10\xd2\xf9\x91\x09\x9d\xd0\x81\x69\xea\x3c\x81\x42\x0e\xd4\xa1\x89\x32\xee\xde\x62\x58\xab\x93\x81\x82\xc6\x14\xb7\xb4\x47\xaa\xbe\xd7\xa2\xa6\xc8\xc7\x17\x46\x23\x8b\xde\x33\x25\xd0\x33\x78\x4c\x49\xc8\x53\x6f\xa3\xc4\x7f\xa6\xa6\xf5\xa1\x44\x14\x02\xf1\x76\x00\x4b\x25\x3b\x64\xab\x31\x6e\x34\x48\x1a\x61\x36\xc4\xa4\x64\x4c\xc0\x07\xb5\xa1\x1a\x35\x9e\x63\xad\xbe\xe5\x7e\xac\x0a\x96\x14\xf4\x38\x1e\x25\x22\x19\x23\x34\x1c\xbb\xc2\x77\xa5\xae\xad\xcb\xb7\x14\xf3\x38\xfa\x80\xe3\x8f\x90\x9e\x9f\xe2\xe7\x8b\xb5\x36\xff\x1d\x68\x76\xcc\xe0\xc3\x61\x2e\xfa\x63\x32\x9d\x16\xd5\xd2\xea\x87\xab\x4a\x7d\xe7\xfc\x24\x3d\xac\x73\x18\x3b\xd1\xef\xb5\x9e\x0a\x16\x71\x54\x07\x34\x6a\x8d\x09\x9a\xa0\xa1\xb4\x75\xee\x93\x3d\x83\x75\x0c\x47\x69\x7c\x09\x9d\xb3\xde\xc9\xf3\xd4\x05\x16\x72\xf0\x1d\xa9\xa4\x87\xe1\x6e\x8a\xf9\xd6\x40\xa1\x7b\xd1\xf7\x8d\x6f\xd3\xa4\x83\x08\x59\xb2\x07\xee\x59\x47\x6e\x6a\x5a\x25\x14\xc6\x7c\xfc\x84\x86\xc1\x3a\xc3\x65\x23\x64\xf3\x92\x1d\x07\xdd\xd3\xcd\x01\x9a\x18\xe8\x45\x08\x3e\x2c\xe9\xfb\xf2\x8c\xa2\x36\xc1\xb6\xd6\x08\xb9\x06\xba\x16\x2a\xd3\x84\x51\x75\xd6\xec\xd8\x89\x7a\x71\x0f\xb3\xb8\xcc\xd8\x10\x74\xf0\x99\x26\xed\x92\xdc\x6f\xa0\xad\x46\xde\xf5\x16\x5a\xf8\x5a\xc5\xdc\x78\x0a\x03\x9d\x85\x96\xce\xce\x9c\x47\x93\x1c\x39\xec\xf9\x2c\x78\x68\x7f\xa1\xee\xba\xa9\xde\x72\xba\xc2\x34\xe2\x6c\x2e\x9f\xdf\x58\xee\x9b\xd9\xbd\x08\xd1\xa4\xc3\xbd\x79\x1d\x39\xcd\xee\x86\x9f\x92\xcb\x7d\x3f\x7f\xfc\xd9\x7c\x23\x6c\x95\x40\x71\xa5\x9e\x0a\xe6\x0e\xde\x10\x70\x06\x7d\xb9\x58\x24\x36\xc8\xd8\x45\x33\x10\x06\x76\x0b\xa2\x07\x6b\x44\x36\x58\x3d\x22\x0e\x0d\x55\xa5\xd4\x43\x8a\x3a\x05\x7b\x7b\x4a\xf1\xb7\x2c\xc4\x1e\xe5\xe4\x73\x3a\x55\x49\xf6\x06\x7e\x60\x43\x48\xc9\xc5\xd1\x47\x3e\xa5\x3b\xb7\xc6\x67\x97\x6a\xb5\xd7\x81\x5a\x7a\x42\x6d\x76\x65\x1f\xce\xc4\x4e\x81\xe1\x6a\x47\xed\x63\xfa\xf4\x58\x65\x17\x75\xcb\xb5\xcc\x07\xe6\xe3\xd7\x9b\x0f\x6c\xd2\xec\xed\xf1\xd6\x08\x11\x68\x6e\x39\x9b\x7f\xa4\xe5\xef\xcb\xff\xe3\xc5\x52\xfd\x8c\x76\x86\x0c\x97\x8c\xfa\x20\x7c\xef\x2d\x4f\xc7\xda\x32\x11\x96\xba\xaf\x64\x5b\x67\xd3\x1d\x8a\xbc\x93\x1f\xad\x51\x57\x6c\x2c\xb9\x13\x2e\x0f\x23\x65\xf7\x8f\xec\x6b\x85\x7f\x01\x02\xbb\x2c\x22\x93\x72\xd9\x4a\x5a\x76\x41\x5d\x16\xd6\xfa\xf9\xa5\xf0\x34\x34\xef\x2f\x25\x8c\xef\x5f\x98\x56\x9b\xa6\xb9\xb8\x78\xa0\x1f\x5d\x9e\x9f\x5f\x9c\xf3\xa6\x79\x78\xf9\xe0\xd1\xfd\xf3\x87\x5f\x3d\xfc\x52\xfd\x1d\x00\x00\xff\xff\x7a\x5c\x78\x1c\x5a\x06\x00\x00")

func assets_minecraft_texts_splashes_txt_bytes() ([]byte, error) {
	return bindata_read(
		_assets_minecraft_texts_splashes_txt,
		"assets/minecraft/texts/splashes.txt",
	)
}

func assets_minecraft_texts_splashes_txt() (*asset, error) {
	bytes, err := assets_minecraft_texts_splashes_txt_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/minecraft/texts/splashes.txt", size: 1626, mode: os.FileMode(436), modTime: time.Unix(1432374943, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assets_minecraft_textures_steven_gui_cog_png = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x02\xd2\x22\x20\xcc\xc1\x06\x24\x7b\x3b\x65\x79\x81\x14\x4b\xb1\x93\x67\x08\x07\x10\xd4\x70\xa4\x74\x00\xf9\xd7\x3d\x5d\x1c\x43\x2c\x7a\x8f\x86\xdc\x16\x3c\xac\xc0\x13\x5c\x24\xd9\x20\x28\xd1\x28\x28\xa1\xba\xd8\x90\x4b\xd9\x80\x49\xb9\xa2\xf9\xcb\xe9\x95\x8f\x13\x5e\xc5\x15\x87\xff\x3d\x18\xe9\x54\x97\xf0\x40\x5e\x63\xa9\xcc\xd2\x29\x87\x85\x77\x57\x1c\x79\x52\x79\xff\xbb\x66\xfa\xe6\x13\xf3\x3b\xc2\xde\x98\xf1\xd5\x0b\x57\xbd\x0f\x3e\x1e\xdc\x2e\xb5\xb7\xfc\x4a\x94\x7e\xb9\x65\xfa\x11\x09\xdf\x73\xba\xba\x2f\x7d\xba\x7b\x5d\x4a\x33\xc3\xfa\x8d\x95\x98\x04\xe7\x3e\x8f\x7a\xbd\x56\xc4\xbc\x7d\x9a\xb1\x92\x53\x76\x2e\x63\xc3\x94\x4b\x82\x4e\x33\xac\x62\x97\xce\x68\x13\x61\x6e\xb8\x76\x4b\x69\xae\xd7\x86\x63\x06\x4f\xe3\x37\x30\x7d\x3b\xd3\x2a\x30\x21\xc8\xea\xee\xeb\x29\xaa\x11\xc9\x37\x9e\x06\xca\xfe\x64\x64\xbb\x7e\xfe\xea\x53\x09\xe5\xa2\x73\xe2\xcb\xc3\x8c\x4d\xf4\x5e\xed\xb2\xbc\x77\xb0\xac\x76\xef\xc4\xe0\x7d\xb3\x0f\x8a\x3c\x09\x5f\x9b\x9b\xdc\x7b\xeb\xf1\xeb\xd3\xad\xf9\x62\x6f\x1e\x57\x30\x9e\x2d\xeb\xad\x8f\x98\xc1\x62\x0d\xf4\x22\x83\xa7\xab\x9f\xcb\x3a\xa7\x84\x26\x40\x00\x00\x00\xff\xff\xa7\x92\x0b\x68\x20\x01\x00\x00")

func assets_minecraft_textures_steven_gui_cog_png_bytes() ([]byte, error) {
	return bindata_read(
		_assets_minecraft_textures_steven_gui_cog_png,
		"assets/minecraft/textures/steven/gui/cog.png",
	)
}

func assets_minecraft_textures_steven_gui_cog_png() (*asset, error) {
	bytes, err := assets_minecraft_textures_steven_gui_cog_png_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/minecraft/textures/steven/gui/cog.png", size: 288, mode: os.FileMode(436), modTime: time.Unix(1432387105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/minecraft/texts/splashes.txt":          assets_minecraft_texts_splashes_txt,
	"assets/minecraft/textures/steven/gui/cog.png": assets_minecraft_textures_steven_gui_cog_png,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assets": {nil, map[string]*_bintree_t{
		"minecraft": {nil, map[string]*_bintree_t{
			"texts": {nil, map[string]*_bintree_t{
				"splashes.txt": {assets_minecraft_texts_splashes_txt, map[string]*_bintree_t{}},
			}},
			"textures": {nil, map[string]*_bintree_t{
				"steven": {nil, map[string]*_bintree_t{
					"gui": {nil, map[string]*_bintree_t{
						"cog.png": {assets_minecraft_textures_steven_gui_cog_png, map[string]*_bintree_t{}},
					}},
				}},
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
